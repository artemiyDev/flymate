# dialogs/my_subs.py
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message
from aiogram_dialog import Dialog, Window, DialogManager
from aiogram_dialog.widgets.text import Const, Format, Multi
from aiogram_dialog.widgets.kbd import Button, ScrollingGroup, Select, Cancel, Back
from aiogram_dialog.widgets.input import TextInput
from aiogram_dialog.api.entities.modes import ShowMode

from bot.db.engine import get_sessionmaker
from bot.db.repo_subscriptions import SubscriptionsRepo


class MySubsSG(StatesGroup):
    list = State()
    select_action = State()
    edit_price = State()
    confirm_delete = State()


# --- callbacks ---

async def on_sub_select(c: CallbackQuery, widget: Select, manager: DialogManager, item_id: str):
    """When user selects a subscription."""
    manager.dialog_data["selected_sub_id"] = int(item_id)
    await manager.switch_to(MySubsSG.select_action)


async def on_edit_price_action(c: CallbackQuery, b: Button, manager: DialogManager):
    """Navigate to price editing."""
    manager.show_mode = ShowMode.EDIT
    await manager.switch_to(MySubsSG.edit_price)


async def on_delete_action(c: CallbackQuery, b: Button, manager: DialogManager):
    """Navigate to deletion confirmation."""
    manager.show_mode = ShowMode.EDIT
    await manager.switch_to(MySubsSG.confirm_delete)


async def on_price_input(m: Message, widget: TextInput, manager: DialogManager, value: str):
    """Handle new price input."""
    try:
        new_price = float(value.replace(",", "."))
        if new_price <= 0:
            await m.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
            return
    except ValueError:
        await m.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    sub_id = manager.dialog_data.get("selected_sub_id")
    if not sub_id:
        await m.answer("–û—à–∏–±–∫–∞: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        return

    Session = get_sessionmaker()
    async with Session() as session:
        async with session.begin():
            success = await SubscriptionsRepo.update_max_price(
                session, sub_id, m.from_user.id, new_price
            )

    if success:
        await m.answer(f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {int(new_price)}")
    else:
        await m.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É")

    try:
        await m.delete()
    except Exception:
        pass

    manager.show_mode = ShowMode.EDIT
    await manager.switch_to(MySubsSG.list)


async def skip_price_input(c: CallbackQuery, b: Button, manager: DialogManager):
    """Cancel price editing."""
    manager.show_mode = ShowMode.EDIT
    await manager.switch_to(MySubsSG.select_action)


async def on_delete_confirm(c: CallbackQuery, b: Button, manager: DialogManager):
    """Confirm subscription deletion."""
    sub_id = manager.dialog_data.get("selected_sub_id")
    if not sub_id:
        await c.answer("–û—à–∏–±–∫–∞: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞", show_alert=True)
        return

    Session = get_sessionmaker()
    async with Session() as session:
        async with session.begin():
            deleted_id = await SubscriptionsRepo.delete(session, sub_id, c.from_user.id)

    if deleted_id:
        await c.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞", show_alert=True)
    else:
        await c.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", show_alert=True)

    manager.show_mode = ShowMode.EDIT
    await manager.switch_to(MySubsSG.list)


async def on_cancel_delete(c: CallbackQuery, b: Button, manager: DialogManager):
    """Cancel deletion."""
    manager.show_mode = ShowMode.EDIT
    await manager.switch_to(MySubsSG.list)


# --- getters ---

async def subs_list_getter(dialog_manager: DialogManager, **kwargs):
    """Get user's subscription list."""
    user_id = dialog_manager.event.from_user.id

    Session = get_sessionmaker()
    async with Session() as session:
        subs = await SubscriptionsRepo.list_by_user(session, user_id)

    if not subs or len(subs) == 0:
        return {
            "has_subs": False,
            "subs": [],
            "count": 0,
        }

    subs_data = []
    for sub in subs:
        # Format data for display
        price_text = "–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è" if sub.max_price >= 999999999 else f"–¥–æ {int(sub.max_price)} {sub.currency}"

        subs_data.append({
            "id": str(sub.id),  # Convert to string for item_id_getter
            "text": f"{sub.origin} ‚Üí {sub.destination} | {sub.range_from.strftime('%d.%m')}‚Äî{sub.range_to.strftime('%d.%m')} | {price_text}",
        })

    return {
        "has_subs": True,
        "subs": subs_data,
        "count": len(subs_data),
    }


async def selected_sub_getter(dialog_manager: DialogManager, **kwargs):
    """Get selected subscription data."""
    sub_id = dialog_manager.dialog_data.get("selected_sub_id")
    user_id = dialog_manager.event.from_user.id

    Session = get_sessionmaker()
    async with Session() as session:
        subs = await SubscriptionsRepo.list_by_user(session, user_id)
        selected_sub = next((s for s in subs if s.id == sub_id), None)

    if not selected_sub:
        return {
            "origin": "‚Äî",
            "destination": "‚Äî",
            "date_range": "‚Äî",
            "price": "‚Äî",
            "currency": "RUB",
        }

    price_text = "–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è" if selected_sub.max_price >= 999999999 else f"–¥–æ {int(selected_sub.max_price)} {selected_sub.currency}"

    return {
        "origin": selected_sub.origin,
        "destination": selected_sub.destination,
        "date_range": f"{selected_sub.range_from.strftime('%d.%m.%Y')} ‚Äî {selected_sub.range_to.strftime('%d.%m.%Y')}",
        "price": price_text,
        "currency": selected_sub.currency,
    }


async def confirm_delete_getter(dialog_manager: DialogManager, **kwargs):
    """Get selected subscription data for deletion confirmation."""
    return await selected_sub_getter(dialog_manager, **kwargs)


# --- windows ---

list_win = Window(
    Format("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ({count}):", when="has_subs"),
    Const("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", when=lambda data, w, m: not data.get("has_subs")),
    ScrollingGroup(
        Select(
            Format("{item[text]}"),
            id="sub_select",
            item_id_getter=lambda x: x["id"],
            items="subs",
            on_click=on_sub_select,
        ),
        id="subs_scroll",
        width=1,
        height=8,
        when="has_subs",
    ),
    Const("\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.", when=lambda data, w, m: not data.get("has_subs")),
    Cancel(Const("–ó–∞–∫—Ä—ã—Ç—å")),
    state=MySubsSG.list,
    getter=subs_list_getter,
)

select_action_win = Window(
    Const("‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"),
    Format("–ú–∞—Ä—à—Ä—É—Ç: {origin} ‚Üí {destination}"),
    Format("–î–∞—Ç—ã: {date_range}"),
    Format("–ë—é–¥–∂–µ—Ç: {price}\n"),
    Button(Const("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É"), id="edit_price", on_click=on_edit_price_action),
    Button(Const("üóë –£–¥–∞–ª–∏—Ç—å"), id="delete", on_click=on_delete_action),
    Back(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥")),
    state=MySubsSG.select_action,
    getter=selected_sub_getter,
)

edit_price_win = Window(
    Const("üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É\n"),
    Format("–ú–∞—Ä—à—Ä—É—Ç: {origin} ‚Üí {destination}"),
    Format("–¢–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç: {price}"),
    Format("–í–∞–ª—é—Ç–∞: {currency}\n"),
    Const("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000):"),
    TextInput(
        id="price_input",
        on_success=on_price_input,
    ),
    Back(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), on_click=skip_price_input),
    state=MySubsSG.edit_price,
    getter=selected_sub_getter,
)

confirm_delete_win = Window(
    Const("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?\n"),
    Format("–ú–∞—Ä—à—Ä—É—Ç: {origin} ‚Üí {destination}"),
    Format("–î–∞—Ç—ã: {date_range}"),
    Format("–ë—é–¥–∂–µ—Ç: {price}"),
    Button(Const("üóë –î–∞, —É–¥–∞–ª–∏—Ç—å"), id="confirm_delete", on_click=on_delete_confirm),
    Button(Const("–û—Ç–º–µ–Ω–∞"), id="cancel_delete", on_click=on_cancel_delete),
    state=MySubsSG.confirm_delete,
    getter=confirm_delete_getter,
)


# --- dialog ---

my_subs_dialog = Dialog(
    list_win,
    select_action_win,
    edit_price_win,
    confirm_delete_win,
)
