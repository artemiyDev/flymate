# dialogs/new_sub.py
from datetime import date
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram_dialog import Dialog, Window, DialogManager
from aiogram_dialog.widgets.text import Const, Format
from aiogram_dialog.widgets.input import TextInput
from aiogram_dialog.widgets.kbd import (
    Next, Back, Cancel, Button, Calendar,
)
from aiogram_dialog.api.entities.modes import ShowMode

from bot.db.engine import get_sessionmaker
from bot.db.repo_subscriptions import SubscriptionsRepo
from bot.gpt_parser import parse_text_request

class NewSubSG(StatesGroup):
    text_input = State()
    origin = State()
    destination = State()
    depart_cal = State()
    return_cal = State()
    budget = State()
    currency = State()
    confirm = State()


# --- callbacks ---

async def process_text_input(m: Message, w, manager: DialogManager, value: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ —á–µ—Ä–µ–∑ GPT."""
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∏–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞
    await m.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")

    # –ü–∞—Ä—Å–∏–º —á–µ—Ä–µ–∑ GPT
    parsed = await parse_text_request(value)

    if not parsed:
        await m.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å\n"
            "‚Ä¢ –ù–∞–∂–∞—Ç—å \"–ó–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é\" –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ dialog_data
    manager.dialog_data["origin"] = parsed.get("departure", "").upper()
    manager.dialog_data["destination"] = parsed.get("destination", "").upper()
    manager.dialog_data["date_from"] = parsed.get("range_from", "")
    manager.dialog_data["date_to"] = parsed.get("range_to", "")

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
    if "currency" in parsed:
        manager.dialog_data["currency"] = parsed.get("currency", "").upper()
    if "max_price" in parsed:
        manager.dialog_data["max_price"] = parsed.get("max_price")

    try:
        await m.delete()  # —É–¥–∞–ª–∏—Ç—å –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    except Exception:
        pass

    manager.show_mode = ShowMode.EDIT

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã
    if "currency" not in manager.dialog_data:
        manager.dialog_data["currency"] = "RUB"
    if "max_price" not in manager.dialog_data:
        manager.dialog_data["max_price"] = None

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é (–≤—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    await manager.switch_to(NewSubSG.confirm)


async def set_origin(m, w, manager, value: str):
    manager.dialog_data["origin"] = value.strip().upper()
    try:
        await m.delete()                    # —É–¥–∞–ª–∏—Ç—å –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    except Exception:
        pass
    manager.show_mode = ShowMode.EDIT       # —Å–ª–µ–¥—É—é—â–∏–π –∞–ø–¥–µ–π—Ç = —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    await manager.next()                    # –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–∫–Ω—É

# destination
async def set_destination(m, w, manager, value: str):
    manager.dialog_data["destination"] = value.strip().upper()
    try:
        await m.delete()
    except Exception:
        pass
    manager.show_mode = ShowMode.EDIT
    await manager.next()


async def on_depart_selected(
    c: CallbackQuery, widget: Calendar, manager: DialogManager, selected_date: date
):
    manager.dialog_data["date_from"] = selected_date.isoformat()
    await manager.next()


async def on_return_selected(
    c: CallbackQuery, widget: Calendar, manager: DialogManager, selected_date: date
):
    manager.dialog_data["date_to"] = selected_date.isoformat()
    # –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç –Ω–µ —Ä–∞–Ω—å—à–µ –≤—ã–ª–µ—Ç–∞
    if manager.dialog_data["date_to"] < manager.dialog_data["date_from"]:
        await c.answer("–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –≤—ã–ª–µ—Ç–∞", show_alert=True)
        return
    await manager.next()

async def choose_usd(c: CallbackQuery, b: Button, manager: DialogManager):
    manager.dialog_data["currency"] = "USD"
    manager.show_mode = ShowMode.EDIT
    await manager.next()

async def choose_rub(c: CallbackQuery, b: Button, manager: DialogManager):
    manager.dialog_data["currency"] = "RUB"
    manager.show_mode = ShowMode.EDIT
    await manager.next()

async def choose_eur(c: CallbackQuery, b: Button, manager: DialogManager):
    manager.dialog_data["currency"] = "EUR"
    manager.show_mode = ShowMode.EDIT
    await manager.next()

async def skip_currency(c: CallbackQuery, b: Button, manager: DialogManager):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RUB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)."""
    manager.dialog_data["currency"] = "RUB"
    manager.show_mode = ShowMode.EDIT
    await manager.next()

async def skip_budget(c: CallbackQuery, b: Button, manager: DialogManager):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –±—é–¥–∂–µ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å None)."""
    manager.dialog_data["max_price"] = None
    manager.show_mode = ShowMode.EDIT
    await manager.next()

async def set_budget(m, w, manager, value: str):
    manager.dialog_data["max_price"] = float(value.replace(",", "."))
    try:
        await m.delete()
    except Exception:
        pass
    manager.show_mode = ShowMode.EDIT
    await manager.next()  # –∫ confirm



async def on_save(c: CallbackQuery, b: Button, manager: DialogManager):
    data = manager.dialog_data
    # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if not all(k in data for k in ("origin", "destination", "date_from", "date_to", "currency")):
        await c.answer("–ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã", show_alert=True)
        return

    # max_price –º–æ–∂–µ—Ç –±—ã—Ç—å None (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
    max_price_value = data.get("max_price")
    if max_price_value is not None:
        max_price_value = float(max_price_value)
    else:
        # –ï—Å–ª–∏ None, —É—Å—Ç–∞–Ω–æ–≤–∏–º –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ë–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 999999999)
        max_price_value = 999999999.0

    Session = get_sessionmaker()
    async with Session() as session:
        async with session.begin():
            await SubscriptionsRepo.create(
                session,
                user_id=c.from_user.id,
                origin=str(data["origin"]).upper(),
                destination=str(data["destination"]).upper(),
                range_from=date.fromisoformat(data["date_from"]),
                range_to=date.fromisoformat(data["date_to"]),
                direct=bool(data.get("direct", False)),
                max_price=max_price_value,
                currency=str(data["currency"]).upper(),
                check_interval_minutes=5,
                active=True,
            )
    await c.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", show_alert=True)
    await manager.done()


# --- getters –¥–ª—è Format ---

async def depart_getter(dialog_manager: DialogManager, **kwargs):
    return {
        "date_from": dialog_manager.dialog_data.get("date_from", "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞"),
    }


async def return_getter(dialog_manager: DialogManager, **kwargs):
    return {
        "date_from": dialog_manager.dialog_data.get("date_from", "‚Äî"),
        "date_to": dialog_manager.dialog_data.get("date_to", "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞"),
    }


async def confirm_getter(dialog_manager: DialogManager, **kwargs):
    max_price = dialog_manager.dialog_data.get("max_price")
    if max_price is None:
        price_text = "–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"
    else:
        currency = dialog_manager.dialog_data.get("currency", "RUB")
        price_text = f"‚â§ {max_price} {currency}"

    return {
        "origin": dialog_manager.dialog_data.get("origin", "‚Äî"),
        "destination": dialog_manager.dialog_data.get("destination", "‚Äî"),
        "date_from": dialog_manager.dialog_data.get("date_from", "‚Äî"),
        "date_to": dialog_manager.dialog_data.get("date_to", "‚Äî"),
        "price_display": price_text,
    }


# --- windows ---

text_input_win = Window(
    Const("‚úàÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ\n\n"
          "–ü—Ä–∏–º–µ—Ä—ã:\n"
          "‚Ä¢ \"–° 7 –æ–∫—Ç—è–±—Ä—è –ø–æ 23 –æ–∫—Ç—è–±—Ä—è –∏–∑ –õ–æ–Ω–¥–æ–Ω–∞ –≤ –ê–Ω—Ç–∞–ª–∏—é\"\n"
          "‚Ä¢ \"–ú–æ—Å–∫–≤–∞ - –î—É–±–∞–π 1-10 —è–Ω–≤–∞—Ä—è, –¥–æ 30000 —Ä—É–±–ª–µ–π\"\n"
          "‚Ä¢ \"–ò–∑ –°—Ç–∞–º–±—É–ª–∞ –≤ –ü–∞—Ä–∏–∂ 15-20 –¥–µ–∫–∞–±—Ä—è, –º–∞–∫—Å 500 –µ–≤—Ä–æ\"\n\n"
          "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥–∞, –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤—ã–ª–µ—Ç–∞ –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –±—é–¥–∂–µ—Ç.\n\n"
          "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–ó–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é\" –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞."),
    TextInput(id="text_in", on_success=process_text_input),
    Button(Const("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é"), id="manual_btn", on_click=lambda c, b, m: m.next()),
    Cancel(Const("–û—Ç–º–µ–Ω–∞")),
    state=NewSubSG.text_input,
)

origin_win = Window(
    Const("‚úàÔ∏è –£–∫–∞–∂–∏ IATA –≥–æ—Ä–æ–¥–∞ –≤—ã–ª–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, IST)"),
    TextInput(id="origin_in", on_success=set_origin),
    Cancel(Const("–û—Ç–º–µ–Ω–∞")),
    state=NewSubSG.origin,
)

dest_win = Window(
    Const("üìç –£–∫–∞–∂–∏ IATA –≥–æ—Ä–æ–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, ALA)"),
    TextInput(id="dest_in", on_success=set_destination),
    Back(Const("–ù–∞–∑–∞–¥")),
    Cancel(Const("–û—Ç–º–µ–Ω–∞")),
    state=NewSubSG.destination,
)

depart_cal_win = Window(
    Format("üóì –í—ã–±–µ—Ä–∏ –ù–ê–ß–ê–õ–û –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –≤—ã–ª–µ—Ç–∞\n(—Å –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –∏—Å–∫–∞—Ç—å –±–∏–ª–µ—Ç—ã)\n\n–¢–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä: {date_from}"),
    Calendar(id="cal_depart", on_click=on_depart_selected),
    Back(Const("–ù–∞–∑–∞–¥")),
    Cancel(Const("–û—Ç–º–µ–Ω–∞")),
    state=NewSubSG.depart_cal,
    getter=depart_getter,
)

return_cal_win = Window(
    Format("üóì –í—ã–±–µ—Ä–∏ –ö–û–ù–ï–¶ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –≤—ã–ª–µ—Ç–∞\n(–ø–æ –∫–∞–∫–æ–µ —á–∏—Å–ª–æ –∏—Å–∫–∞—Ç—å –±–∏–ª–µ—Ç—ã)\n\n–ù–∞—á–∞–ª–æ: {date_from}\n–ö–æ–Ω–µ—Ü: {date_to}"),
    Calendar(id="cal_return", on_click=on_return_selected),
    Back(Const("–ù–∞–∑–∞–¥")),
    Cancel(Const("–û—Ç–º–µ–Ω–∞")),
    state=NewSubSG.return_cal,
    getter=return_getter,
)

currency_win = Window(
    Const("–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω RUB):"),
    Button(Const("üíµ USD"), id="cur_usd", on_click=choose_usd),
    Button(Const("üí∂ EUR"), id="cur_eur", on_click=choose_eur),
    Button(Const("‚ÇΩ RUB"), id="cur_rub", on_click=choose_rub),
    Button(Const("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å (RUB)"), id="skip_cur", on_click=skip_currency),
    Back(Const("–ù–∞–∑–∞–¥")),
    Cancel(Const("–û—Ç–º–µ–Ω–∞")),
    state=NewSubSG.currency,
)

budget_win = Window(
    Const("–í–≤–µ–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –±–∏–ª–µ—Ç–∞\n(–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏, —á—Ç–æ–±—ã –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å):"),
    TextInput(id="budget_in", on_success=set_budget),
    Button(Const("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)"), id="skip_budget", on_click=skip_budget),
    Back(Const("–ù–∞–∑–∞–¥")),
    Cancel(Const("–û—Ç–º–µ–Ω–∞")),
    state=NewSubSG.budget,
)

confirm_win = Window(
    Format(
        "–ü—Ä–æ–≤–µ—Ä—è–µ–º:\n"
        "–û—Ç: {origin}\n"
        "–î–æ: {destination}\n"
        "–î–∞—Ç—ã –≤—ã–ª–µ—Ç–∞: {date_from} ‚Üí {date_to}\n"
        "–ë—é–¥–∂–µ—Ç: {price_display}"
    ),
    Button(Const("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"), id="save", on_click=on_save),
    Back(Const("–ù–∞–∑–∞–¥")),
    Cancel(Const("–û—Ç–º–µ–Ω–∞")),
    state=NewSubSG.confirm,
    getter=confirm_getter,
)

# --- dialog ---

new_sub_dialog = Dialog(
    text_input_win,
    origin_win,
    dest_win,
    depart_cal_win,
    return_cal_win,
    currency_win,
    budget_win,
    confirm_win,
)
