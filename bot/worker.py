# bot/worker.py
from __future__ import annotations

import asyncio
import logging
import sys
from datetime import date, datetime, timedelta, timezone
from logging.handlers import RotatingFileHandler
from typing import Any

import aiohttp
from aiogram import Bot
from dateutil import parser as dtparse
from redis.asyncio import Redis
from sqlalchemy.ext.asyncio import AsyncSession

from bot.settings import Settings
from bot.db.engine import init_db_engine, get_sessionmaker, close_db_engine
from bot.db.repo_subscriptions import SubscriptionsRepo

UTC = timezone.utc

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger("flymate.worker")


def setup_logging(settings: Settings) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è worker —Å –∑–∞–ø–∏—Å—å—é –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª."""
    log_level = getattr(logging, settings.LOG_LEVEL.upper(), logging.INFO)

    # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
    formatter = logging.Formatter(
        fmt="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S"
    )

    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ñ–∞–π–ª–∞ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π (–º–∞–∫—Å 10MB, 5 —Ñ–∞–π–ª–æ–≤)
    file_handler = RotatingFileHandler(
        settings.WORKER_LOG_FILE,
        maxBytes=10 * 1024 * 1024,  # 10 MB
        backupCount=5,
        encoding="utf-8"
    )
    file_handler.setLevel(log_level)
    file_handler.setFormatter(formatter)

    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(log_level)
    console_handler.setFormatter(formatter)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ worker
    logger.setLevel(log_level)
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)

    # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–ø–∞–≥–∞—Ü–∏—é, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –≤ root logger
    logger.propagate = False

    logger.info(f"–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: —É—Ä–æ–≤–µ–Ω—å={settings.LOG_LEVEL}, —Ñ–∞–π–ª={settings.WORKER_LOG_FILE}")


API_BASE_URL = "https://api.travelpayouts.com/aviasales/v3/prices_for_dates"


def month_span(d1: date, d2: date) -> list[str]:
    """–†–∞–∑–±–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–∞ YYYY-MM (API –ø—Ä–∏–Ω–∏–º–∞–µ—Ç YYYY-MM –∏ YYYY-MM-DD)."""
    cur = date(d1.year, d1.month, 1)
    last = date(d2.year, d2.month, 1)
    out = []
    while cur <= last:
        out.append(cur.strftime("%Y-%m"))
        # —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
        if cur.month == 12:
            cur = date(cur.year + 1, 1, 1)
        else:
            cur = date(cur.year, cur.month + 1, 1)
    return out


def price_tracking_key(sub_id: int, origin: str, destination: str,
                       departure_date: str, direct: bool) -> str:
    """
    –ö–ª—é—á –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –ø–æ –º–∞—Ä—à—Ä—É—Ç—É/–¥–∞—Ç–µ.
    –§–æ—Ä–º–∞—Ç: subs:{sub_id}:minprice:{origin}_{destination}_{date}_{direct}
    """
    direct_flag = "direct" if direct else "transfer"
    return f"subs:{sub_id}:minprice:{origin}_{destination}_{departure_date}_{direct_flag}"


def human_duration(minutes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—ë—Ç–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥."""
    h, m = divmod(int(minutes), 60)
    return f"{h}h {m:02d}m"


def build_deeplink(aviasales_path: str | None) -> str | None:
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ Aviasales."""
    if not aviasales_path:
        return None
    # —á–∞—â–µ –≤—Å–µ–≥–æ –ø—Ä–∏–ª–µ—Ç–∞–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –≤–∏–¥–∞ /some/path ‚Äî –ø—Ä–µ—Ñ–∏–∫—Å—É–µ–º
    return f"https://aviasales.ru{aviasales_path}"


def build_search_url(origin: str, destination: str, departure_at: str) -> str:
    """
    –ë—ã—Å—Ç—Ä—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä human-link –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ Aviasales.
    """
    dt = dtparse.isoparse(departure_at)
    day = dt.strftime("%d")
    month = dt.strftime("%m")
    # "21" –≤ —Ö–≤–æ—Å—Ç–µ = —à–∞–±–ª–æ–Ω –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏/–≤–æ–∑–≤—Ä–∞—Ç–∞ (–º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –ø–æ–¥ —Å–µ–±—è)
    return f"https://www.aviasales.com/search/{origin}{day}{month}{destination}21"


async def fetch_prices_for_month(session_http: aiohttp.ClientSession,
                                 base_url: str,
                                 token: str,
                                 origin: str,
                                 destination: str,
                                 departure_month: str,
                                 direct: bool,
                                 currency: str) -> list[dict[str, Any]]:
    """
    –û–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ /aviasales/v3/prices_for_dates
    –î–∞—Ç—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –≤ YYYY-MM –∏ YYYY-MM-DD (—Å–º. –æ—Ñ. –¥–æ–∫–∏). –ú—ã –¥–∞—ë–º YYYY-MM.
    """
    params = {
        "origin": origin,
        "destination": destination,
        "departure_at": departure_month,  # YYYY-MM
        "sorting": "price",
        "direct": "true" if direct else "false",
        "limit": 100,
        "page": 1,
        "one_way": "true",
        "token": token,
        "currency": currency,
    }

    logger.debug(f"–ó–∞–ø—Ä–æ—Å –∫ API: {origin}‚Üí{destination}, –º–µ—Å—è—Ü={departure_month}, direct={direct}, currency={currency}")

    async with session_http.get(API_BASE_URL, params=params, timeout=30) as r:
        if r.status != 200:
            text = await r.text()
            logger.error(f"Aviasales API error {r.status}: {text}")
            raise RuntimeError(f"Aviasales {r.status}: {text}")
        data = await r.json()
        offers_count = len(data.get("data", []))
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {offers_count} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è {origin}‚Üí{destination} ({departure_month})")
        return data.get("data", [])


async def process_subscription(bot: Bot,
                               rds: Redis,
                               session_db: AsyncSession,
                               http: aiohttp.ClientSession,
                               settings: Settings,
                               sub) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–Ω—É –ø–æ–¥–ø–∏—Å–∫—É: –¥–µ—Ä–Ω—É—Ç—å API –ø–æ –º–µ—Å—è—Ü–∞–º,
    –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã.
    """
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ #{sub.id}: {sub.origin}‚Üí{sub.destination}, "
                f"–¥–∞—Ç—ã={sub.range_from} - {sub.range_to}, –º–∞–∫—Å.—Ü–µ–Ω–∞={sub.max_price} {sub.currency}")

    months = month_span(sub.range_from, sub.range_to)
    logger.debug(f"–ü–æ–¥–ø–∏—Å–∫–∞ #{sub.id}: –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –º–µ—Å—è—Ü–µ–≤: {len(months)} ({', '.join(months)})")

    total_sent = 0  # —Å—á—ë—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

    for mon in months:
        try:
            offers = await fetch_prices_for_month(
                http, API_BASE_URL, settings.AVIASALES_API_TOKEN,
                origin=sub.origin, destination=sub.destination,
                departure_month=mon, direct=sub.direct,
                currency=sub.currency,
            )
        except Exception as e:
            logger.warning(f"–ü–æ–¥–ø–∏—Å–∫–∞ #{sub.id}: –æ—à–∏–±–∫–∞ API –¥–ª—è –º–µ—Å—è—Ü–∞ {mon}: {e}")
            continue

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ –≤—ã–ª–µ—Ç–∞
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {date_str: [offers_list]}
        offers_by_date: dict[str, list[dict[str, Any]]] = {}

        for f in offers:
            price = f.get("price")
            if price is None or float(price) > float(sub.max_price):
                continue

            dep = f.get("departure_at")
            if not dep:
                continue

            dt = dtparse.isoparse(dep)
            departure_date = dt.date()

            # —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
            if departure_date < sub.range_from or departure_date > sub.range_to:
                continue

            date_str = departure_date.strftime("%Y-%m-%d")

            if date_str not in offers_by_date:
                offers_by_date[date_str] = []

            offers_by_date[date_str].append(f)

        logger.debug(f"–ü–æ–¥–ø–∏—Å–∫–∞ #{sub.id}: –Ω–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç –≤—ã–ª–µ—Ç–∞: {len(offers_by_date)}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –¥–∞—Ç—É –æ—Ç–¥–µ–ª—å–Ω–æ
        for date_str, date_offers in offers_by_date.items():
            # –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
            min_offer = min(date_offers, key=lambda x: float(x.get("price", float("inf"))))
            new_price = float(min_offer.get("price"))

            # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω—ã
            tracking_key = price_tracking_key(
                sub.id, sub.origin, sub.destination, date_str, sub.direct
            )

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∏–Ω–∏–º—É–º –∏–∑ Redis
            stored_min = await rds.get(tracking_key)

            should_notify = False
            old_price = None

            if stored_min is None:
                # –ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
                logger.info(f"üìç –ü–æ–¥–ø–∏—Å–∫–∞ #{sub.id}: –Ω–æ–≤–∞—è –¥–∞—Ç–∞ {date_str}, –ø–µ—Ä–≤–∞—è —Ü–µ–Ω–∞ {new_price} {sub.currency}")
                should_notify = True
            else:
                old_price = float(stored_min)
                if new_price < old_price:
                    # –¶–µ–Ω–∞ —Å–Ω–∏–∑–∏–ª–∞—Å—å!
                    savings = old_price - new_price
                    logger.info(f"üìâ –ü–æ–¥–ø–∏—Å–∫–∞ #{sub.id}: —Å–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è {date_str}: "
                                f"{old_price} ‚Üí {new_price} {sub.currency} "
                                f"(—ç–∫–æ–Ω–æ–º–∏—è: {savings:.2f})")
                    should_notify = True
                else:
                    # –¶–µ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∏–ª–∏ –≤—ã—Ä–æ—Å–ª–∞
                    logger.debug(f"–ü–æ–¥–ø–∏—Å–∫–∞ #{sub.id}: —Ü–µ–Ω–∞ –¥–ª—è {date_str} –Ω–µ —Å–Ω–∏–∑–∏–ª–∞—Å—å "
                                 f"({new_price} >= {old_price}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")

            if should_notify:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                airline = min_offer.get("airline")
                transfers = min_offer.get("transfers")
                duration = min_offer.get("duration")
                origin = min_offer.get("origin")
                destination = min_offer.get("destination")
                dep = min_offer.get("departure_at")
                link = build_deeplink(min_offer.get("link"))
                search_link = build_search_url(origin, destination, dep)

                dt = dtparse.isoparse(dep)
                dt_txt = dt.strftime("%d.%m %H:%M")
                transfers_txt = "–ü—Ä—è–º–æ–π" if transfers == 0 else f"{transfers} –ø–µ—Ä–µ—Å–∞–¥–∫–∞" if transfers == 1 else f"{transfers} –ø–µ—Ä–µ—Å–∞–¥–∫–∏"
                dur_txt = human_duration(duration or 0)

                lines = [
                    f"üõ´ <b>{origin} ‚Üí {destination}</b>",
                    f"üìÖ {dt_txt}",
                    f"üí∫ {airline or '–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}",
                    f"üí∞ <b>{new_price} {sub.currency}</b>",
                ]

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã
                if old_price is not None:
                    savings = old_price - new_price
                    savings_percent = (savings / old_price) * 100
                    lines.append(f"üìâ <b>-{savings:.2f} {sub.currency} (-{savings_percent:.1f}%)</b>")
                    lines.append(f"   –ë—ã–ª–æ: {old_price} {sub.currency}")
                else:
                    lines.append("üÜï <b>–ù–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!</b>")

                lines.extend([
                    f"üîÅ {transfers_txt}",
                    f"üïí {dur_txt}",
                ])

                if link:
                    lines.append(f'<a href="{link}">üîó –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç</a>')
                if search_link:
                    lines.append(f'<a href="{search_link}">üîé –ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ</a>')

                text = "\n".join(lines)

                try:
                    await bot.send_message(
                        chat_id=sub.user_id,
                        text=text,
                        parse_mode="HTML",
                        disable_web_page_preview=True
                    )
                    total_sent += 1
                    logger.info(f"‚úâÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ #{sub.id}: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sub.user_id}")

                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ Redis
                    await rds.set(tracking_key, str(new_price))
                    # TTL 90 –¥–Ω–µ–π (—Å –∑–∞–ø–∞—Å–æ–º –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏)
                    await rds.expire(tracking_key, 90 * 24 * 60 * 60)

                except Exception as e:
                    logger.error(f"–ü–æ–¥–ø–∏—Å–∫–∞ #{sub.id}: –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

                # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –Ω–µ –±–æ–ª–µ–µ 10 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—É—Å–∫
                if total_sent >= 10:
                    logger.warning(f"–ü–æ–¥–ø–∏—Å–∫–∞ #{sub.id}: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç 10 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, "
                                   f"–æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑")
                    break

        # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
        if total_sent >= 10:
            break

    if total_sent > 0:
        logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ #{sub.id}: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {total_sent}")
    else:
        logger.info(f"‚ÑπÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ #{sub.id}: –Ω–æ–≤—ã—Ö —Å–Ω–∏–∂–µ–Ω–∏–π —Ü–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    # –°–¥–≤–∏–≥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    await SubscriptionsRepo.bump_next_check(session_db, sub.id)
    logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ #{sub.id}: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞")


async def loop_worker():
    settings = Settings()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging(settings)

    logger.info("=" * 60)
    logger.info("–ó–∞–ø—É—Å–∫ worker –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã")
    logger.info("=" * 60)

    # init DB
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...")
    init_db_engine()
    Session = get_sessionmaker()
    logger.info("–ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    # init Redis
    logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis {settings.REDIS_HOST}:{settings.REDIS_PORT}...")
    rds = Redis(
        host=settings.REDIS_HOST,
        port=settings.REDIS_PORT,
        password=(settings.REDIS_PASSWORD or None),
        decode_responses=True,
    )
    logger.info("Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")

    # init TG
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
    bot = Bot(token=settings.TG_TOKEN)
    logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async with aiohttp.ClientSession(headers={}) as http:
        try:
            logger.info("–ù–∞—á–∞–ª–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ worker (–∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: 5 –º–∏–Ω—É—Ç)")

            while True:
                try:
                    logger.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫, —Ç—Ä–µ–±—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏...")

                    async with Session() as s:
                        async with s.begin():
                            due = await SubscriptionsRepo.fetch_due(s, limit=200)

                        if not due:
                            logger.debug("–ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏, –æ–∂–∏–¥–∞–Ω–∏–µ 5 –º–∏–Ω—É—Ç...")
                            await asyncio.sleep(300)
                            continue

                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(due)}")

                        # –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –æ—á–µ—Ä–µ–¥–∏
                        for idx, sub in enumerate(due, 1):
                            logger.info(f"[{idx}/{len(due)}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ #{sub.id}")
                            async with s.begin():
                                await process_subscription(bot, rds, s, http, settings, sub)

                except Exception as e:
                    logger.exception(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ worker: {e}")

                # –∂–¥—ë–º 5 –º–∏–Ω—É—Ç
                logger.info("–¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ 5 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
                await asyncio.sleep(300)
        finally:
            logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã worker...")
            await close_db_engine()
            await rds.close()
            await bot.session.close()
            logger.info("Worker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def main():
    asyncio.run(loop_worker())


if __name__ == "__main__":
    main()