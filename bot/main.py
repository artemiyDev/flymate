# bot/main.py
import asyncio
import logging

from aiogram import Bot, Dispatcher, F
from aiogram.types import BotCommand, Message
from aiogram.fsm.storage.memory import MemoryStorage

from aiogram import Router
from aiogram.filters import Command
from aiogram_dialog import setup_dialogs, StartMode, DialogManager

from bot.db.repo_users import UsersRepo
from settings import Settings
from dialogs.new_sub import new_sub_dialog, NewSubSG
from dialogs.my_subs import my_subs_dialog, MySubsSG
from db.engine import init_db_engine, get_sessionmaker

async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–û–Ω–±–æ—Ä–¥–∏–Ω–≥ / —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
        BotCommand(command="subs", description="–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"),
        BotCommand(command="deal", description="–õ—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–µ–π—á–∞—Å"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
    ]
    await bot.set_my_commands(commands)


def build_storage(settings: Settings):
    # –ò—Å–ø–æ–ª—å–∑—É–π Redis –≤ –ø—Ä–æ–¥–µ, Memory ‚Äî –¥–ª—è –ª–æ–∫–∞–ª–∫–∏
    if settings.REDIS_DSN:
        # r = Redis.from_url(settings.REDIS_DSN, decode_responses=False)
        # return RedisStorage(r)
        # –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –±–µ–∑ Redis ‚Äî –æ—Å—Ç–∞–≤–∏–º Memory:
        pass
    return MemoryStorage()


def build_common_router() -> Router:
    r = Router()

    @r.message(Command("start"))
    async def cmd_start(message: Message, dialog_manager: DialogManager):
        # upsert user
        Session = get_sessionmaker()
        async with Session() as session:
            async with session.begin():
                await UsersRepo.upsert_from_tg(session, message.from_user)

        # –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥
        await dialog_manager.start(NewSubSG.text_input, mode=StartMode.RESET_STACK)

    @r.message(Command("help"))
    async def cmd_help(message):
        await message.answer(
            "–Ø –ø–æ–º–æ–≥—É –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –¥–µ—à—ë–≤—ã–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã.\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /start ‚Äî —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
            "‚Ä¢ /subs ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫\n"
            "‚Ä¢ /deal ‚Äî –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
        )

    @r.message(Command("subs"))
    async def cmd_subs(message: Message, dialog_manager: DialogManager):
        await dialog_manager.start(MySubsSG.list, mode=StartMode.RESET_STACK)

    @r.message(Command("deal"))
    async def cmd_deal(message):
        await message.answer("–õ—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ—è–≤—è—Ç—Å—è –ø–æ–∑–∂–µ üë∑")

    return r


async def main():
    logging.basicConfig(level=logging.INFO)

    settings = Settings()
    init_db_engine()

    bot = Bot(token=settings.TG_TOKEN)
    dp = Dispatcher()


    # –†–æ—É—Ç–µ—Ä—ã: —Å–Ω–∞—á–∞–ª–∞ –æ–±—ã—á–Ω—ã–µ, –ø–æ—Ç–æ–º –¥–∏–∞–ª–æ–≥–∏
    dp.include_router(build_common_router())
    dp.include_router(new_sub_dialog)
    dp.include_router(my_subs_dialog)

    # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É aiogram-dialog v2
    setup_dialogs(dp)

    await set_bot_commands(bot)

    # –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å APScheduler ‚Äî –ø–æ–¥–Ω–∏–º–∞–π –µ–≥–æ —Ç—É—Ç (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ) –¥–æ —Å—Ç–∞—Ä—Ç–∞ polling

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
